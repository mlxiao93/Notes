{"version":3,"sources":["promise.js"],"names":["Promise","_All","promises","resolve","reject","resList","resolvedCount","index","then","res","length","catch","err","prototype","_finally","cb","promise","value","LimitRequest","limit","currentNum","task","tasks","pop","execTask","req","unshift","limitRequest","requests","Array","fill","map","v","i","setTimeout"],"mappings":"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","file":"promise.5a8638e0.js","sourceRoot":"..","sourcesContent":["Promise._All = function(promises) {\n  return new Promise((resolve, reject) => {\n    const resList = [];\n    let resolvedCount = 0;\n    for (let index in promises) {\n      promises[index].then(res => {\n        resList[index] = res;\n        resolvedCount++;\n        if (resolvedCount === promises.length) resolve(resList);\n      }).catch(err => {\n        reject(err);\n      })\n    }\n  })\n}\n\n// const promises = [\n//   Promise.resolve(123),\n//   Promise.resolve(222),\n//   Promise.resolve(789),\n// ]\n\n// Promise._All(promises).then(res => {\n//   console.log(res);\n// }).catch(err => {\n//   console.error(err)\n// })\n\nPromise.prototype._finally = function(cb) {\n  const promise = this;\n  return promise.then(res => {\n    return Promise.resolve(cb()).then(() => value);    // 若cb是promise，需要等待cb\n    // cb();\n    // return res;\n  }).catch(err => {\n    return Promise.resolve(cb()).then(() => { throw err })\n    // cb();\n    // throw err;\n  })\n}\n\n// Promise.resolve(123).then(res => {console.log(res)})._finally(() => {\n//   console.log('finally');\n// })\n\nclass LimitRequest {\n  constructor(limit) {\n    this.limit = limit;\n  }\n\n  currentNum = 0;\n  tasks = [];\n\n  execTask() {\n    this.currentNum++;\n    const task = this.tasks.pop();\n    if (task) {\n      task().then(() => {\n        this.currentNum--;\n        this.execTask()\n      }).catch(() => {\n        this.currentNum--;\n        this.execTask()\n      })\n    }\n  }\n\n  request(req) {\n    return new Promise((resolve, reject) => {\n      const task = () => {\n        return req().then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => {\n          reject(err);\n          throw err;\n        })\n      }\n      this.tasks.unshift(task);\n      if (this.currentNum < this.limit) {\n        this.execTask();\n      }\n    });\n  }\n}\n\nconst limitRequest = new LimitRequest(2);\n\nconst requests = Array(10).fill(null).map((v, i) => {\n  return () => new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(i);\n    }, 1000)\n  })\n})\n\n// for (req of requests) {\n//   limitRequest.request(req).then(res => {\n//     console.log(res);\n//   });\n// }"]}