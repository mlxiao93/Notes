{"version":3,"sources":["binary-tree-min-length-between-nodes.js"],"names":["TreeNode","val","left","right","nodes","Array","fill","map","v","i","maxDepth","root","Math","max","getMinLength","p","q","closestParent","getClosestCommonParent","pathP","getPath","pathQ","length","target","path","push","leftPath","rightPath","pop","getPath2","unshift","allPaths","pathes"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AAEC,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,OAAKA,GAAL,GAAWA,GAAX;AACA,OAAKC,IAAL,GAAY,KAAKC,KAAL,GAAa,IAAzB;AACD;;AAED,IAAMC,KAAK,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,EAAqBC,GAArB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,IAAIT,QAAJ,CAAaS,CAAb,CAAV;AAAA,CAAzB,CAAd;AAEDL,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,EAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,EAAD,CAAtB;;AAEA,SAASM,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAI,CAACA,IAAL,EAAW,OAAO,CAAP;AACX,SAAOC,IAAI,CAACC,GAAL,CAASH,QAAQ,CAACC,IAAI,CAACT,IAAN,EAAYS,IAAI,CAACR,KAAjB,CAAjB,IAA4C,CAAnD;AACD;AAKD;AACA;AACA;;;AACA,SAASW,YAAT,CAAsBH,IAAtB,EAA4BI,CAA5B,EAA+BC,CAA/B,EAAkC;AAChC;AACA,MAAMC,aAAa,GAAGC,sBAAsB,CAACP,IAAD,EAAOI,CAAP,EAAUC,CAAV,CAA5C,CAFgC,CAIhC;;AACA,MAAMG,KAAK,GAAGC,OAAO,CAACH,aAAD,EAAgBF,CAAhB,CAArB;AACA,MAAMM,KAAK,GAAGD,OAAO,CAACH,aAAD,EAAgBD,CAAhB,CAArB;AACA,SAAOG,KAAK,CAACG,MAAN,GAAeD,KAAK,CAACC,MAArB,GAA8B,CAArC;AACD;AAED;AACA;AACA;;;AACA,SAASJ,sBAAT,CAAgCP,IAAhC,EAAsCI,CAAtC,EAAyCC,CAAzC,EAA4C;AAC1C,MAAI,CAACL,IAAL,EAAW,OAAO,IAAP;AACX,MAAIA,IAAI,CAACV,GAAL,KAAac,CAAC,CAACd,GAAf,IAAsBU,IAAI,CAACV,GAAL,KAAae,CAAC,CAACf,GAAzC,EAA8C,OAAOU,IAAP;AAC9C,MAAMT,IAAI,GAAGgB,sBAAsB,CAACP,IAAI,CAACT,IAAN,EAAYa,CAAZ,EAAeC,CAAf,CAAnC;AACA,MAAMb,KAAK,GAAGe,sBAAsB,CAACP,IAAI,CAACR,KAAN,EAAaY,CAAb,EAAgBC,CAAhB,CAApC;AACA,MAAId,IAAI,IAAIC,KAAZ,EAAmB,OAAOQ,IAAP;AACnB,MAAIT,IAAJ,EAAU,OAAOA,IAAP;AACV,MAAIC,KAAJ,EAAW,OAAOA,KAAP;AACX,SAAO,IAAP;AACD;AAED;AACA;AACA;;;AACA,SAASiB,OAAT,CAAiBT,IAAjB,EAAuBY,MAAvB,EAA0C;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACxC,MAAI,CAACb,IAAL,EAAW;AACXa,EAAAA,IAAI,CAACC,IAAL,CAAUd,IAAV;AACA,MAAIA,IAAI,CAACV,GAAL,KAAasB,MAAM,CAACtB,GAAxB,EAA6B,OAAOuB,IAAP;AAC7B,MAAIE,QAAQ,GAAGN,OAAO,CAACT,IAAI,CAACT,IAAN,EAAYqB,MAAZ,EAAoBC,IAApB,CAAtB;AACA,MAAIG,SAAS,GAAGP,OAAO,CAACT,IAAI,CAACR,KAAN,EAAaoB,MAAb,EAAqBC,IAArB,CAAvB;;AACA,MAAI,CAACE,QAAD,IAAa,CAACC,SAAlB,EAA6B;AAC3BH,IAAAA,IAAI,CAACI,GAAL;AACA;AACD;;AAAA;AACD,SAAOJ,IAAP;AACD;;AAGD,SAASK,QAAT,CAAkBlB,IAAlB,EAAwBY,MAAxB,EAA2C;AAAA,MAAXC,IAAW,uEAAJ,EAAI;AACzC,MAAI,CAACb,IAAL,EAAW,OAAO,IAAP;;AACX,MAAIA,IAAI,CAACV,GAAL,KAAasB,MAAM,CAACtB,GAAxB,EAA6B;AAC3BuB,IAAAA,IAAI,CAACM,OAAL,CAAanB,IAAb;AACA,WAAOa,IAAP;AACD;;AAAA;AAED,MAAME,QAAQ,GAAGG,QAAQ,CAAClB,IAAI,CAACT,IAAN,EAAYqB,MAAZ,EAAoBC,IAApB,CAAzB;AACA,MAAMG,SAAS,GAAGE,QAAQ,CAAClB,IAAI,CAACR,KAAN,EAAaoB,MAAb,EAAqBC,IAArB,CAA1B;;AAEA,MAAIE,QAAQ,IAAIC,SAAhB,EAA2B;AACzBH,IAAAA,IAAI,CAACM,OAAL,CAAanB,IAAb;AACA,WAAOa,IAAP;AACD;;AAAA;AAED,SAAO,IAAP;AACD;;AAED,SAASO,QAAT,CAAkBpB,IAAlB,EAAgD;AAAA,MAAxBa,IAAwB,uEAAjB,EAAiB;AAAA,MAAbQ,MAAa,uEAAJ,EAAI;;AAC9C,MAAI,CAACrB,IAAL,EAAW;AACTqB,IAAAA,MAAM,CAACP,IAAP,CAAYD,IAAZ;AACA,WAAOQ,MAAP;AACD;;AAAA;AACDR,EAAAA,IAAI,CAACC,IAAL,CAAUd,IAAV;AACAoB,EAAAA,QAAQ,CAACpB,IAAI,CAACT,IAAN,qBAAgBsB,IAAhB,GAAuBQ,MAAvB,CAAR;AACAD,EAAAA,QAAQ,CAACpB,IAAI,CAACR,KAAN,qBAAiBqB,IAAjB,GAAwBQ,MAAxB,CAAR;AACA,SAAOA,MAAP;AACD,EAED;AACA;AAEA","file":"binary-tree-min-length-between-nodes.c6dc656d.js","sourceRoot":"..","sourcesContent":["/**\n * 给定一个二叉树, 找到该树中两个指定节点间的最短距离\n */\n\n function TreeNode(val) {\n   this.val = val;\n   this.left = this.right = null;\n }\n\n const nodes = Array(12).fill(null).map((v, i) => new TreeNode(i));\n\nnodes[1].left = nodes[2];\nnodes[1].right = nodes[3];\nnodes[2].left = nodes[4];\nnodes[2].right = nodes[5];\nnodes[3].left = nodes[6];\nnodes[3].right = nodes[7];\nnodes[4].left = nodes[8];\nnodes[4].right = nodes[9];\nnodes[6].left = nodes[10];\nnodes[6].right = nodes[11];\n\nfunction maxDepth(root) {\n  if (!root) return 0;\n  return Math.max(maxDepth(root.left, root.right)) + 1;\n}\n\n\n\n\n/**\n * q与q之间的最短路径长度\n */\nfunction getMinLength(root, p, q) {\n  // 1. 先计算最近的共同祖先\n  const closestParent = getClosestCommonParent(root, p, q);\n\n  // 2. 计算祖先到p和q的路径长度，相加\n  const pathP = getPath(closestParent, p);\n  const pathQ = getPath(closestParent, q);\n  return pathP.length + pathQ.length - 2;\n}\n\n/**\n * p与q之间最近的共同祖先\n */\nfunction getClosestCommonParent(root, p, q) {\n  if (!root) return null;\n  if (root.val === p.val || root.val === q.val) return root;\n  const left = getClosestCommonParent(root.left, p, q);\n  const right = getClosestCommonParent(root.right, p, q);\n  if (left && right) return root;\n  if (left) return left;\n  if (right) return right;\n  return null;\n}\n\n/**\n * root到target的路径\n */\nfunction getPath(root, target, path = []) {\n  if (!root) return\n  path.push(root);\n  if (root.val === target.val) return path;\n  let leftPath = getPath(root.left, target, path);\n  let rightPath = getPath(root.right, target, path);\n  if (!leftPath && !rightPath) {\n    path.pop();\n    return;\n  };\n  return path;\n}\n\n\nfunction getPath2(root, target, path = []) {\n  if (!root) return null;\n  if (root.val === target.val) {\n    path.unshift(root);\n    return path;\n  };\n\n  const leftPath = getPath2(root.left, target, path);\n  const rightPath = getPath2(root.right, target, path);\n\n  if (leftPath || rightPath) {\n    path.unshift(root);\n    return path;\n  };\n\n  return null\n}\n\nfunction allPaths(root, path = [], pathes = []) {\n  if (!root) {\n    pathes.push(path);\n    return pathes;\n  };\n  path.push(root);\n  allPaths(root.left, [...path], pathes);\n  allPaths(root.right, [...path], pathes);\n  return pathes;\n}\n\n// console.log(allPaths(nodes[1]));\n// console.log(getPath2(nodes[1], nodes[9]))\n\n// console.log(getMinLength(nodes[1], nodes[8], nodes[5]));"]}