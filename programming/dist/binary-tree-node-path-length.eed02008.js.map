{"version":3,"sources":["binary-tree-node-path-length.js"],"names":["TreeNode","val","left","right","nodes","Array","fill","map","v","i","get","root","p","q"],"mappings":"AAAA;AACA;AACA;AAEC,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,OAAKA,GAAL,GAAWA,GAAX;AACA,OAAKC,IAAL,GAAY,KAAKC,KAAL,GAAa,IAAzB;AACD;;AAED,IAAMC,KAAK,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,IAAf,EAAqBC,GAArB,CAAyB,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAU,IAAIT,QAAJ,CAAaS,CAAb,CAAV;AAAA,CAAzB,CAAd;AAEDL,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,CAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,CAAD,CAAtB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASF,IAAT,GAAgBE,KAAK,CAAC,EAAD,CAArB;AACAA,KAAK,CAAC,CAAD,CAAL,CAASD,KAAT,GAAiBC,KAAK,CAAC,EAAD,CAAtB,EAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;;AACA,SAASM,GAAT,CAAaC,IAAb,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB,CAExB","file":"binary-tree-node-path-length.eed02008.js","sourceRoot":"..","sourcesContent":["/**\n * 给定一个二叉树, 找到该树中两个指定节点间的最短距离\n */\n\n function TreeNode(val) {\n   this.val = val;\n   this.left = this.right = null;\n }\n\n const nodes = Array(12).fill(null).map((v, i) => new TreeNode(i));\n\nnodes[1].left = nodes[2];\nnodes[1].right = nodes[3];\nnodes[2].left = nodes[4];\nnodes[2].right = nodes[5];\nnodes[3].left = nodes[6];\nnodes[3].right = nodes[7];\nnodes[4].left = nodes[8];\nnodes[4].right = nodes[9];\nnodes[6].left = nodes[10];\nnodes[6].right = nodes[11];\n\n\n// function traverse(root) {\n//   const queue = [root];\n\n//   while(queue.length) {\n//     const head = queue.pop();\n//     console.log(head.val);\n//     if (head.left) {\n//       queue.unshift(head.left)\n//     }\n//     if (head.right) {\n//       queue.unshift(head.right)\n//     }\n//   }\n\n// }\n// traverse(nodes[1])\n\n/**\n */\nfunction get(root, p, q) {\n  \n}\n\n"]}